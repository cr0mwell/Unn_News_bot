from emoji import emojize
from functools import wraps
import json
import os
import random
import telebot

from settings import (COLS_TO_NUM, NUM_TO_COLS)
from spider import (parse_news, load_model_with_vetorizers, classify_text)


COMPOSITIONS = {'–°–æ—Ñ—ñ—ó –†–æ—Ç–∞—Ä—É'        : ['–ß–µ—Ä–≤–æ–Ω—É —Ä—É—Ç—É'],
                'Nirvana'             : ['Smells like teen spirit', 'My girl', 'Rape me', 'Dumb'],
                '–ü–∞–≤–ª–∞ –ó—ñ–±—Ä–æ–≤–∞'       : ['–•—Ä–µ—â–∞—Ç–∏–∫'],
                '–Ü–≤–æ –ë–æ–±—É–ª–∞'          : ['–°—Ç–∞—Ä–µ –¥–∂–µ—Ä–µ–ª–æ', '–ú—ñ—Å—è—á–Ω–µ –∫–æ–ª–µ—Å–æ'],
                '–ú–∏—Ö–∞–π–ª–∞ –ü–æ–ø–ª–∞–≤—Å—å–∫–æ–≥–æ': ['–ö—Ä–æ–ø–∏–≤—É', '–Æ–Ω–∏–π –æ—Ä–µ–ª']}
BOT_TOKEN   = "XXXX"
bot         = telebot.TeleBot(BOT_TOKEN)
user_step   = {}  # so they won't reset every time the bot restarts
show_board  = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)  # create the image selection keyboard
hide_board  = telebot.types.ReplyKeyboardRemove()  # if sent as reply_markup, will hide the keyboard

tfidf_w, tfidf_ch, class_model, model_loaded = load_model_with_vetorizers()


def convert_columns(users, new_type):
    known_users = {}
    for user in users:
        known_users[int(user)] = users[user]
        known_users[int(user)]['columns'] = new_type(users[user]['columns'])

    return known_users


try:
    with open(os.path.join('src', 'known_users.json'), encoding='utf-8') as f:
        known_users = json.load(f)
        known_users = convert_columns(known_users, set)
        print(f'Loaded known users: {known_users}')

except (FileNotFoundError, json.decoder.JSONDecodeError):
    print('Failed to get data from the known_users.json file. Creating default dict')
    known_users = {}


###################
# HELPER FUNCTIONS
###################
def get_user_step(uid):
    if uid in user_step:
        return user_step[uid]
    else:
        user_step[uid] = 0
        return 0


def set_username(m):
    "Alters username."
    if not m.text.startswith('/'):
        uid = m.chat.id
        known_users[uid]['name'] = m.text
        print(f'{uid} has changed its username to "{m.text}"')
        bot.send_message(uid, f"–î–æ–±—Ä–µ, —è –∑–∞–ø–∞–º'—è—Ç–∞–≤ üôÇ")
        cmd_settings(m)
    else:
        cmd_settings(m)

def set_batch(m):

    if not m.text.startswith('/'):
        uid = m.chat.id

        try:
            new_batch = int(m.text)
            if 0 < new_batch <= 50:
                known_users[uid]['batch'] = new_batch
                print(f'{uid} –∑–º—ñ–Ω–∏–≤ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏–Ω –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –Ω–∞ {known_users[uid]["batch"]}')
            else:
                bot.send_message(uid, f'{new_batch} –Ω–æ–≤–∏–Ω - –±—ñ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É (50). –í—Å—Ç–∞–Ω–æ–≤–ª—é—é –≤ 50')
                known_users[uid]['batch'] = 50
                print(f'{uid} –∑–º—ñ–Ω–∏–≤ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏–Ω –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –Ω–∞ {known_users[uid]["batch"]}')

        except (TypeError, ValueError):
            bot.send_message(uid, f'–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è {m.text}. –ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –≤ –º–µ–∂–∞—Ö 1-50.')

        cmd_settings(m)
    else:
        cmd_settings(m)


def user_check(f):
    @wraps(f)
    def deco(*args, **kwargs):

        if args[0].chat.id not in known_users:
            print(f'{args[0].chat.id} is not in known_users')
            known_users[args[0].chat.id] = {'name': args[0].from_user.first_name,
                                            'period': None,
                                            'columns': set(),
                                            'last_article': None,
                                            'batch': 10,
                                            'online': True,
                                            'search_in_progress': False}
        return f(*args, **kwargs)
    return deco


#########################
# COMMAND HANDLERS BLOCK
#########################
@bot.message_handler(commands=['start'])
def cmd_start(m):
    "/start command handler."

    uid = m.chat.id
    user_step[uid] = 0

    if uid not in known_users:
        known_users[m.chat.id] = {'name': m.from_user.first_name,
                                  'period': None,
                                  'columns': set(),
                                  'last_article': None,
                                  'batch': 10,
                                  'online': True,
                                  'search_in_progress': False}

        bot.send_message(uid, f'–í—ñ—Ç–∞—é, {m.from_user.first_name}! üôÇ\n'
                              f'–î–ª—è –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è –∑ –º–æ—ó–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏, –Ω–∞–±–µ—Ä–∏ /help.\n'
                              f'–Ø–∫—â–æ –∂ —Ç–∏ —Ö–æ—á–µ—à –ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –Ω–æ–≤–∏–Ω, –Ω–∞–±–µ—Ä–∏ /search_news',
                         reply_markup=hide_board)
    else:
        bot.send_message(uid, f'–†–∞–¥–∏–π —Ç–µ–±–µ –±–∞—á–∏—Ç–∏, {known_users[uid]["name"]}! üôÇ\n'
                              f'–î–ª—è –ø–æ—á–∞—Ç–∫—É –ø–æ—à—É–∫—É –Ω–æ–≤–∏–Ω –∑–∞ —ñ—Å–Ω—É—é—á–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏, –Ω–∞–±–µ—Ä–∏ /search_news.\n'
                              f'–î–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å, –≤–≤–µ–¥–∏ /settings.\n'
                              f'–ù–∞—Ä–µ—à—Ç—ñ, /help, —è–∫—â–æ —Ö–æ—á–µ—à –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ —É—Å—ñ–º–∞ –º–æ—ó–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏',
                         reply_markup=hide_board)


@bot.message_handler(commands=['help'])
def cmd_help(m):
    "/help command handler."

    uid = m.chat.id
    user_step[uid] = 0
    bot.send_message(uid, emojize(':robot_face: –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n'
                                  '/help - –ø–µ—Ä–µ–ª—ñ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ü—å–æ–≥–æ –±–æ—Ç–∞\n'
                                  '/settings - –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n'
                                  '/start - –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏\n'
                                  '/search_news - –ø–æ—à—É–∫ –Ω–æ–≤–∏–Ω\n'
                                  '/stop_search - –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ –ø–æ—à—É–∫ –Ω–æ–≤–∏–Ω\n'
                                  f'/classify_article - –∫–ª–∞—Å–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ {len(COLS_TO_NUM)} –∫–ª–∞—Å—ñ–≤:\n'
                                  f'{", ".join([col for col in COLS_TO_NUM.keys()])}'),
                     reply_markup=hide_board)


@bot.message_handler(commands=['settings', '–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'])
@user_check
def cmd_settings(m):
    "/settings command handler."

    uid = m.chat.id
    user_step[uid] = 0

    show_board.keyboard = [['—Ä—É–±—Ä–∏–∫–∏', '—ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—à—É–∫—É'], ['–Ω—ñ–∫–Ω–µ–π–º', '–∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏–Ω –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ', '–≤–∏–π—Ç–∏']]
    bot.send_message(uid, '–û–±–µ—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, —è–∫–µ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏:', reply_markup=show_board)
    user_step[uid] = 1  # waiting for user to select an option


@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 1)
def select_setting(m):
    "Main settings selection handler."
    uid  = m.chat.id
    text = m.text

    if text == '–≤–∏–π—Ç–∏':
        user_step[uid] = 0
        return telebot.types.ReplyKeyboardRemove()
    elif text == '–Ω–∞–∑–∞–¥':
        user_step[uid] = 0
        cmd_settings(m)
    elif text == '–Ω—ñ–∫–Ω–µ–π–º':
        bot.send_message(uid, '–ù–∞–ø–∏—à–∏, —è–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?', reply_markup=hide_board)
        bot.register_next_step_handler(m, set_username)
        user_step[uid] = 0
    elif text == '—ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—à—É–∫—É':
        show_board.keyboard = [['—Å—å–æ–≥–æ–¥–Ω—ñ', '—Ç–∏–∂–¥–µ–Ω—å'], ['–º—ñ—Å—è—Ü—å', '–Ω–∞–∑–∞–¥']]
        bot.send_message(uid, '–ó–∞ —è–∫–∏–π –ø–µ—Ä—ñ–æ–¥ —Ç–∏ —Ö–æ—á–µ—à –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏?', reply_markup=show_board)
    elif text == '—Ä—É–±—Ä–∏–∫–∏':
        if not known_users[uid]['columns']:
            show_board.keyboard = [[c] for c in COLS_TO_NUM.keys()] + [['–æ–±—Ä–∞—Ç–∏ —É—Å—ñ'], ['–≤–∏–¥–∞–ª–∏—Ç–∏ —É—Å—ñ'], ['–Ω–∞–∑–∞–¥']]
        else:
            selected_columns    = set(COLS_TO_NUM.keys()).difference({NUM_TO_COLS[col] for col in known_users[uid]['columns']})
            show_board.keyboard = [[c] for c in selected_columns] + [['–æ–±—Ä–∞—Ç–∏ —É—Å—ñ'], ['–≤–∏–¥–∞–ª–∏—Ç–∏ —É—Å—ñ'], ['–Ω–∞–∑–∞–¥']]

        bot.send_message(uid, '–û–±–µ—Ä–∏ —Ä—É–±—Ä–∏–∫–∏, —è–∫—ñ —Ç–æ–±—ñ —Ü—ñ–∫–∞–≤—ñ?', reply_markup=show_board)

    elif text == '–∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏–Ω –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ':
        bot.send_message(uid, "–°–∫—ñ–ª—å–∫–∏ –Ω–æ–≤–∏–Ω –º–∞—î –≤–∏—Å–∏–ª–∞—Ç–∏—Å—è –∑–∞ —Ä–∞–∑?", reply_markup=hide_board)
        user_step[uid] = 0
        bot.register_next_step_handler(m, set_batch)
    elif text in ['—Å—å–æ–≥–æ–¥–Ω—ñ', '—Ç–∏–∂–¥–µ–Ω—å', '–º—ñ—Å—è—Ü—å']:
        known_users[uid]['period'] = text
        print(f'{uid} –∑–º—ñ–Ω–∏–≤ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ "{text}"')
        user_step[uid] = 0
        cmd_settings(m)
    elif text in COLS_TO_NUM.keys() or text in ['–æ–±—Ä–∞—Ç–∏ —É—Å—ñ', '–≤–∏–¥–∞–ª–∏—Ç–∏ —É—Å—ñ']:
        if text == '–æ–±—Ä–∞—Ç–∏ —É—Å—ñ':
            known_users[uid]['columns'].update(set(COLS_TO_NUM.values()))
            print(f'{uid} –¥–æ–¥–∞–≤ —É—Å—ñ —Ä—É–±—Ä–∏–∫–∏')
        elif text == '–≤–∏–¥–∞–ª–∏—Ç–∏ —É—Å—ñ':
            known_users[uid]['columns'] = set()
            print(f'{uid} –≤–∏–¥–∞–ª–∏–≤ —É—Å—ñ —Ä—É–±—Ä–∏–∫–∏')
        else:
            known_users[uid]['columns'].add(COLS_TO_NUM[text])
            print(f'{uid} –¥–æ–¥–∞–≤ —Ä—É–±—Ä–∏–∫—É "{text}"')
        m.text = '—Ä—É–±—Ä–∏–∫–∏'
        select_setting(m)
    else:
        bot.send_message(uid, f'–í–∏–±–∞—á, –¥—Ä—É–∂–µ, –Ω–µ —Ä–æ–∑—É–º—ñ—é –∫–æ–º–∞–Ω–¥—É "{text}", —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑?', reply_markup=hide_board)
        user_step[uid] = 0
        cmd_settings(m)


@bot.message_handler(commands=['stop_search'])
def cmd_exit(m):
    "/exit command handler."
    uid = m.chat.id
    user_step[uid] = 0

    try:
        known_users[uid]['online'] = False
        known_users[uid]['last_article'] = None
    except KeyError:
        pass  # just exiting

    bot.send_message(uid, '–ë—É–≤ –¥—É–∂–µ —Ä–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏, –±—É–¥—É —á–µ–∫–∞—Ç–∏ –Ω–∞ —Ç–µ–±–µ! üëã', reply_markup=hide_board)


@bot.message_handler(commands=['search_news'])
@user_check
def cmd_search_news(m):
    """
    /search_news command handler.

    The function searches for the news on https://www.unn.com.ua/uk/news.
    It uses the following attributes from the known_users[uid] dict:
    period(str)       - one of the following values: ['—Å—å–æ–≥–æ–¥–Ω—ñ', '—Ç–∏–∂–¥–µ–Ω—å', '–º—ñ—Å—è—Ü—å']
    columns(set)      - one or several columns from the following:
                        ['–ø–æ–ª—ñ—Ç–∏–∫–∞', '–∫—Ä–∏–º—ñ–Ω–∞–ª', '–µ–∫–æ–Ω–æ–º—ñ–∫–∞', '—Å–≤—ñ—Ç–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏', '–∫—É–ª—å—Ç—É—Ä–∞', '–¥–æ–±—Ä—ñ –Ω–æ–≤–∏–Ω–∏',
                         '—Å—É—Å–ø—ñ–ª—å—Å—Ç–≤–æ', '—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó', '—Å–ø–æ—Ä—Ç']
    last_article(str) - last sent article
    batch(int)        - number of articles to send in a batch when found
    online(bool)      - if the function should proceed with parsing
    """
    uid = m.chat.id
    user_step[uid] = 0

    period  = known_users.get(uid).get('period', None)
    columns = known_users.get(uid).get('columns', None)

    if period is None:
        known_users[uid]['period'] = '—Ç–∏–∂–¥–µ–Ω—å'
        bot.send_message(uid, '–í—Å—Ç–∞–Ω–æ–≤–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—à—É–∫—É –Ω–æ–≤–∏–Ω –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö. \n'
                              '–ü–æ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—é –±–æ—Ç –±—É–¥–µ —à—É–∫–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å')

    if not columns:
        known_users[uid]['columns'] = set(COLS_TO_NUM.values())
        bot.send_message(uid, '–ü–æ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—é –±–æ—Ç –±—É–¥–µ —à—É–∫–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –≤ —É—Å—ñ—Ö —Ä—É–±—Ä–∏–∫–∞—Ö.\n'
                              '–Ø–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ —ó—Ö –Ω–∞–±—ñ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç—É–π—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏?')

    # Exiting if the news are being parsed already
    if known_users[uid]['search_in_progress']:
        bot.send_message(uid, '–í–∏–±–∞—á, –¥—Ä—É–∂–µ, –∞–ª–µ —è –≤–∂–µ —É –ø—Ä–æ—Ü–µ—Å—Å—ñ –ø–æ—à—É–∫—É, —ñ —à–≤–∏–¥—à–µ –Ω–µ –º–æ–∂—É.\n'
                              '–ü–æ—á–µ–∫–∞–π —â–µ —Ç—Ä–æ—à–∫–∏, —ñ —è –ø–æ–≤–µ—Ä–Ω—É—Å—è –∑ –Ω–æ–≤–∏–Ω–∞–º–∏!')
        return

    performer = list(COMPOSITIONS.keys())[random.randint(0, len(COMPOSITIONS) - 1)]
    bot.send_message(uid, f'–ë–æ—Ç, –Ω–∞—Å–ø—ñ–≤—É—é—á–∏ "{random.choice(COMPOSITIONS[performer])}" {performer}, '
    f'–ø–æ—á–∏–Ω–∞—î –∫–æ–ø–∏—Ä—Å–∞—Ç–∏—Å—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö —Å–∞–π—Ç—É, —à—É–∫–∞—é—á–∏ {known_users[uid]["batch"]} '
    f'{"—Å–≤—ñ–∂—É –Ω–æ–≤–∏–Ω—É" if known_users[uid]["batch"] == 1 else "–Ω–æ–≤–∏–Ω"} '
    f'{"–∑ —É—Å—ñ—Ö —Ä—É–±—Ä–∏–∫" if known_users[uid]["columns"] == set(COLS_TO_NUM.values()) else "–∑ —Ä—É–±—Ä–∏–∫ " + ", ".join([NUM_TO_COLS[col] for col in known_users[uid]["columns"]])} '
    f'–∑–∞ {known_users[uid]["period"]}. –Ø–∫ —Ç—ñ–ª—å–∫–∏ –∑\'—è–≤–ª—è—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –≤—ñ–Ω –≤—ñ–¥—Ä–∞–∑—É –≤–∏—à–ª–µ —ó—Ö —Ç–æ–±—ñ!')

    parse_news(bot, uid, known_users[uid])

    # Dropping the setting to defaults after the /exit command was called
    known_users[uid]['online'] = True


@user_check
@bot.message_handler(commands=['classify_article'])
def cmd_classify_article(m):
    "/classify_article command handler"

    uid = m.chat.id

    if not model_loaded:
        bot.send_message(uid, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ. üòî\n'
                              '–°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞ –ø—ñ–∑–Ω—ñ—à–µ')
        return

    bot.send_message(uid, '–í–≤–µ–¥–∏ –Ω–æ–≤–∏–Ω—É –∞–±–æ —Ç–µ–∫—Å—Ç, —è–∫–∏–π –±–∏ —Ç–∏ —Ö–æ—Ç—ñ–≤ –∫–ª–∞—Å–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏?')
    bot.register_next_step_handler(m, do_classify_article)


def do_classify_article(m):

    predicted_column = classify_text(m.text, [tfidf_w, tfidf_ch], class_model)
    bot.send_message(m.chat.id, f'–°—Ç–∞–≤–ª—é –Ω–∞ —Ç–µ, —â–æ —Ü–µ –≤—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "{NUM_TO_COLS[predicted_column]}"! üßê')


if __name__ == "__main__":
    try:
        bot.polling()
    finally:
        with open(os.path.join('src', 'known_users.json'), 'w', encoding='utf-8') as f:
            known_users = convert_columns(known_users, list)
            json.dump(known_users, f)
